### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Auth {
  me: User
  sessions: [Session]
}

type Challenge {
  hex: String!
  message: String!
  nonce: String!
}

"""Date custom scalar type"""
scalar Date

type DocumentDriveLocalState {
  availableOffline: Boolean!
  sharingType: String
}

input DocumentDriveLocalStateInput {
  availableOffline: Boolean!
  sharingType: String
}

input DocumentDriveStateInput {
  icon: String
  id: ID!
  name: String!
  slug: String
}

type Mutation {
  createChallenge(address: String!): Challenge
  createSession(session: SessionInput!): SessionOutput
  revokeSession(sessionId: String!): Session
  solveChallenge(nonce: String!, signature: String!): SessionOutput
}

type Query {
  system: SwitchboardHost
}

type Session {
  allowedOrigins: String
  createdAt: Date!
  createdBy: String!
  id: String!
  isUserCreated: Boolean!
  name: String
  referenceExpiryDate: Date
  referenceTokenId: String!
  revokedAt: Date
}

input SessionInput {
  allowedOrigins: String!
  expiryDurationSeconds: Int
  name: String!
}

type SessionOutput {
  session: Session!
  token: String!
}

type SwitchboardHost implements System {
  auth: Auth
}

interface System {
  auth: Auth
}

type User {
  address: String!
  createdAt: Date!
}