### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  id: ID!
  label: String
  reference: String!
}

union Asset = Cash | FixedIncome

type AssetPurchaseGroupTransaction {
  cashTransaction: BaseTransaction
  feeTransactions: [BaseTransaction]
  fixedIncomeTransaction: BaseTransaction
  id: ID!
  type: String!
}

type AssetSaleGroupTransaction {
  cashTransaction: BaseTransaction
  feeTransactions: [BaseTransaction]
  fixedIncomeTransaction: BaseTransaction
  id: ID!
  type: String!
}

type Auth {
  me: User
  sessions: [Session]
}

type BaseTransaction {
  accountId: ID
  amount: Float!
  assetId: ID!
  counterPartyAccountId: ID
  entryTime: Date!
  id: ID!
  settlementTime: Date
  tradeTime: Date
  txRef: String
}

type Cash {
  currency: String!
  id: ID!
  spvId: ID!
}

type Challenge {
  hex: String!
  message: String!
  nonce: String!
}

"""Date custom scalar type"""
scalar Date

interface Document {
  created: Date!
  documentType: String!
  id: String!
  lastModified: Date!
  name: String!
  operations: [Operation!]!
  revision: Int!
}

type DocumentDriveState {
  icon: String
  id: ID!
  name: String!
  nodes: [Node]!
  slug: String
}

type DriveSystem implements System {
  auth: Auth
  sync: Sync
}

type FeesPaymentGroupTransaction {
  feeTransactions: [BaseTransaction]
  id: ID!
  type: String!
}

type FixedIncome {
  CUSIP: String
  ISIN: String
  annualizedYield: Float!
  coupon: Float
  currentValue: Float
  fixedIncomeTypeId: ID!
  id: ID!
  marketValue: Float!
  maturity: Date!
  name: String!
  notional: Float!
  purchaseDate: Date!
  purchasePrice: Float!
  purchaseProceeds: Float!
  realizedSurplus: Float!
  spvId: ID!
  totalDiscount: Float!
  totalSurplus: Float!
}

type FixedIncomeType {
  id: ID!
  name: String!
}

union GroupTransaction = AssetPurchaseGroupTransaction | AssetSaleGroupTransaction | FeesPaymentGroupTransaction | InterestDrawGroupTransaction | InterestReturnGroupTransaction | PrincipalDrawGroupTransaction | PrincipalReturnGroupTransaction

input InputListenerFilter {
  branch: [String]
  documentId: [String]
  documentType: [String]
  scope: [String]
}

input InputOperationUpdate {
  hash: String!
  index: Int!
  input: String!
  skip: Int
  timestamp: String!
  type: String!
}

input InputStrandUpdate {
  branch: String!
  documentId: String
  driveId: String!
  operations: [InputOperationUpdate!]!
  scope: String!
}

type InterestDrawGroupTransaction {
  id: ID!
  interestTransaction: BaseTransaction
  type: String!
}

type InterestReturnGroupTransaction {
  id: ID!
  interestTransaction: BaseTransaction
  type: String!
}

type Listener {
  block: Boolean!
  callInfo: ListenerCallInfo
  filter: ListenerFilter!
  label: String
  listenerId: ID!
  system: Boolean!
}

type ListenerCallInfo {
  data: String
  name: String
  transmitterType: TransmitterType
}

type ListenerFilter {
  branch: [String!]
  documentId: [ID!]
  documentType: [String!]!
  scope: [String!]
}

type ListenerRevision {
  branch: String!
  documentId: String
  driveId: String!
  revision: Int!
  scope: String!
  status: UpdateStatus!
}

input ListenerRevisionInput {
  branch: String!
  documentId: String!
  driveId: String!
  revision: Int!
  scope: String!
  status: UpdateStatus!
}

type Mutation {
  createChallenge(address: String!): Challenge
  createSession(session: SessionInput!): SessionOutput
  revokeSession(sessionId: String!): Session
  solveChallenge(nonce: String!, signature: String!): SessionOutput
}

type Node {
  documentType: String
  id: String!
  kind: String!
  name: String!
  parentFolder: String
}

interface Operation {
  hash: String!
  index: Int!
  timestamp: Date!
  type: String!
}

type OperationUpdate {
  hash: String!
  index: Int!
  input: String!
  skip: Int!
  timestamp: String!
  type: String!
}

type PrincipalDrawGroupTransaction {
  cashTransaction: BaseTransaction
  feeTransactions: [BaseTransaction]
  id: ID!
  type: String!
}

type PrincipalReturnGroupTransaction {
  cashTransaction: BaseTransaction
  feeTransactions: [BaseTransaction]
  id: ID!
  type: String!
}

type Query {
  document(id: String!): Document
  system: DriveSystem
}

type RealWorldAssetsDocument implements Document {
  created: Date!
  documentType: String!
  id: String!
  lastModified: Date!
  name: String!
  operations: [Operation!]!
  revision: Int!
  state: RealWorldAssetsState!
}

type RealWorldAssetsState {
  accounts: [Account!]!
  feeTypes: [ServiceProvider!]!
  fixedIncomeTypes: [FixedIncomeType!]!
  portfolio: [Asset!]!
  principalLenderAccountId: ID!
  spvs: [Spv!]!
  transactions: [GroupTransaction!]!
}

type RwaDocument implements Document {
  created: Date!
  documentType: String!
  field1: String!
  id: String!
  lastModified: Date!
  name: String!
  operations: [Operation!]!
  revision: Int!
}

type ServiceProvider {
  accountId: ID!
  feeType: String!
  id: ID!
  name: String!
}

type Session {
  allowedOrigins: String
  createdAt: Date!
  createdBy: String!
  id: String!
  isUserCreated: Boolean!
  name: String
  referenceExpiryDate: Date
  referenceTokenId: String!
  revokedAt: Date
}

input SessionInput {
  allowedOrigins: String!
  expiryDurationSeconds: Int
  name: String!
}

type SessionOutput {
  session: Session!
  token: String!
}

type Spv {
  id: ID!
  name: String!
}

type StrandUpdate {
  branch: String!
  documentId: String!
  driveId: String!
  operations: [OperationUpdate!]!
  scope: String!
}

type SwitchboardHost implements System {
  auth: Auth
}

type Sync {
  strands(listenerId: ID, since: Date): [StrandUpdate]
}

interface System {
  auth: Auth
}

type TransactionFee {
  amount: Float!
  serviceProviderId: ID!
}

enum TransmitterType {
  Internal
  MatrixConnect
  PullResponder
  RESTWebhook
  SecureConnect
  SwitchboardPush
}

enum UpdateStatus {
  CONFLICT
  ERROR
  MISSING
  SUCCESS
}

type User {
  address: String!
  createdAt: Date!
}