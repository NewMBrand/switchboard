### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AddDriveResponse {
  global: DocumentDriveState!
  local: DocumentDriveLocalState!
}

type Challenge {
  hex: String!
  message: String!
  nonce: String!
}

type CoreUnit {
  code: String
  descriptionParagraph: String
  descriptionParagraphImageSource: String
  descriptionSentence: String
  id: String
  imageSource: String
  name: String
  shortCode: String
}

type Counter {
  count: Int!
  message: String!
}

"""Date custom scalar type"""
scalar Date

type DocumentDriveLocalState {
  availableOffline: Boolean!
  sharingType: String
}

input DocumentDriveLocalStateInput {
  availableOffline: Boolean!
  sharingType: String
}

type DocumentDriveState {
  icon: String
  id: ID!
  name: String!
  nodes: [Node]!
  remoteUrl: String
}

input DocumentDriveStateInput {
  icon: String
  id: ID!
  name: String!
  remoteUrl: String
}

input InputOperationUpdate {
  hash: String!
  index: Int!
  input: String!
  skip: Int
  timestamp: String!
  type: String!
}

input InputStrandUpdate {
  branch: String!
  documentId: String!
  driveId: String!
  operations: [InputOperationUpdate!]!
  scope: String!
}

type ListenerRevision {
  branch: String!
  documentId: String!
  driveId: String!
  revision: Int!
  scope: String!
  status: String!
}

input ListenerRevisionInput {
  branch: String!
  documentId: String!
  driveId: String!
  revision: Int!
  scope: String!
  status: UpdateStatus!
}

type Mutation {
  addDrive(global: DocumentDriveStateInput!, local: DocumentDriveLocalStateInput!): AddDriveResponse
  createChallenge(address: String!): Challenge
  createSession(session: SessionInput!): SessionOutput
  deleteDrive(id: String!): Boolean
  pushUpdates(strands: [InputStrandUpdate!]): [ListenerRevision]
  revokeSession(sessionId: String!): Session
  solveChallenge(nonce: String!, signature: String!): SessionOutput
}

type Node {
  documentType: String
  id: String!
  kind: String!
  name: String!
  parentFolder: String
}

type OperationUpdate {
  inputJson: String!
  name: String!
  revision: Int!
  skip: Int!
  stateHash: String!
}

type Query {
  acknowledge(listenerId: ID, revisions: [ListenerRevisionInput]): Boolean
  coreUnit(id: String): CoreUnit
  coreUnits: [CoreUnit]
  countUsers(message: String!): Counter
  drive(id: String!): DocumentDriveState
  drives: [String]
  me: User
  sessions: [Session]
  strands(listenerId: ID, revisions: [ListenerRevisionInput]): [StrandUpdate]
  strandsSince(listenerId: ID, since: Date): [StrandUpdate]
}

type Session {
  allowedOrigins: String
  createdAt: Date!
  createdBy: String!
  id: String!
  isUserCreated: Boolean!
  name: String
  referenceExpiryDate: Date
  referenceTokenId: String!
  revokedAt: Date
}

input SessionInput {
  allowedOrigins: String!
  expiryDurationSeconds: Int
  name: String!
}

type SessionOutput {
  session: Session!
  token: String!
}

type StrandUpdate {
  branch: String!
  documentId: String!
  driveId: String!
  operations: [OperationUpdate!]!
  scope: String!
}

enum UpdateStatus {
  CONFLICT
  ERROR
  MISSING
  SUCCESS
}

type User {
  address: String!
  createdAt: Date!
}